#!/bin/sh

PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/ucb
Version="1.0"

if [ -f ~/.color ]; then
    nul=$(printf '\033[0m')
    cyn=$(printf '\033[1;36m')
    yel=$(printf '\033[1;33m')
    wht=$(printf '\033[1;37m')
    gry=$(printf '\033[0;37m')
else
    nul=""
    cyn=""
    yel=""
    wht=""
    gry=""
fi

printf %s "$yel"
uname -a | sed 's/x86_64 x86_64 x86_64/x86_64/g' | sed 's/i686 i686 i386/i686\/i386/' | sed 's/i586 i586 i386/i586\/i386/' | sed 's/ GNU\/Linux//' | sed 's/\.localdomain//'
DATE=$(date '+%a')
TIME=$(date '+%I:%M')
AMPM=$(date '+%p' | tr "[:upper:]" "[:lower:]")
YEAR=$(date '+ %Z %b %d %Y')
FDATE=$(echo "$DATE $TIME$AMPM$YEAR" | sed 's/  */ /g' | sed 's/ 0/ /')
zoninf=""
if [ -x /bin/zonename ]; then
    zonnm=$(zonename)
    if [ "$zonnm" != "global" ]; then
        zoninf=", Zonename: $zonnm"
    fi
fi

printit() {
    _kb="(KBytes)"
    _fstype_to_print="$fstype"
    if [ "$fs" = "fuseblk" ]; then _fstype_to_print="NTFS"; fi
    printf '%s\r%s%s Filesystem  %s %s       Total        Used   Available  Cap Mounted on%s\n' \
        "$nul" "$cyn" "$_fstype_to_print" "$spc" "$_kb" "$wht"
    printf '%s\n' "==========================-===========-===========-===========-====-==========="
    echo "$filesys" | awk 2>/dev/null '
    NF > 4 {
        printf("%-26s %11s %11s %11s %4s %1-s\n",$1,$2,$3,$4,$5,$6);
        total += $2; usd += $3; avl += $4
    }
    END {
        printf("==========================-===========-===========-===========-====-===========\n");
        if (total > 0) {
            printf("Total= KiloBytes:          %11.0f %11.0f %11.0f %3.0f%%\n",total,usd,avl,int((usd/total)*100));
        } else {
            printf("Total= KiloBytes:          %11.0f %11.0f %11.0f %3.0f%%\n",total,usd,avl,0);
        }
        printf("       MegaBytes:           %10.1f  %10.1f  %10.1f\n",total/1024,usd/1024,avl/1024);
        printf("       GigaBytes:             %8.2f    %8.2f    %8.2f\n",total/1048576,usd/1048576,avl/1048576);
        printf("       TeraBytes:               %6.3f      %6.3f      %6.3f\n\n",total/1073741824,usd/1073741824,avl/1073741824);
    }'
}

printit2() {
    _fstype_to_print="$fstype"
    if [ "$fs" = "fuseblk" ]; then _fstype_to_print="NTFS"; fi
    printf '%s\r%s%s Filesystem  %s %s       Total        Used   Available  Cap Mounted on%s\n' \
        "$nul" "$cyn" "$_fstype_to_print" "$spc" "$kb" "$wht"
    printf '%s\n' "==========================-===========-===========-===========-====-==========="
    echo "$filesys" | awk 2>/dev/null '
    NF > 4 {
        printf("%-26s %11s %11s %11s %4s %1-s\n",$1,$2,$3,$4,$5,$6);
    }
    END {
        printf("==========================-===========-===========-===========-====-===========\n");
    }'
}

optns=$*
fsm="-k"
_count=$(echo "$optns" | grep -E -i -c -- '-h')
if [ "$_count" -gt 0 ]; then
    fsm="-h"
fi
optns=$(echo "$optns" | sed 's/\-h//g' | sed 's/ *//g')

for fs in ufs vxfs nfs ext4 ext3 ext2 pcfs vfat fuseblk ntfs
do
    current_filesys_data=$(df "$fsm" -F "$fs" 2>/dev/null | grep -E -v -i '^$|^auto_|^Filesystem')
    if [ -n "$current_filesys_data" ]; then
        spc=""
        if [ "$fs" = "ufs" ] || [ "$fs" = "nfs" ]; then spc=" "; fi
        fstype=$(echo "$fs" | tr '[:lower:]' '[:upper:]')
        if [ "$fs" = "nfs" ]; then
            nfs_mount_points=$(echo "$current_filesys_data" | grep -E -i 'nas_unix' | awk '{print $6}')
            fstype=NAS
            nsrtfilesys=""
            _nl=$(printf '\n')

            if [ -n "$nfs_mount_points" ]; then
                printf '%s%s%s Filesystem   [working] ' "$nul" "$cyn" "$fstype"
            fi

            for nas_dfi in $nfs_mount_points
            do
                nfilesys_tmp=$(ls -1 "$nas_dfi" 2>/dev/null)
                for nas_i in $nfilesys_tmp
                do
                    if [ -z "$nsrtfilesys" ]; then
                        nsrtfilesys="$nas_i"
                    else
                        nsrtfilesys="$nsrtfilesys$_nl$nas_i"
                    fi
                done
            done

            nfilesys=""
            OIFS="$IFS"; IFS="$_nl"
            for nas_i2 in $nsrtfilesys
            do
                IFS="$OIFS"
                if [ -z "$nfilesys" ]; then
                    nfilesys="/programs/$nas_i2"
                else
                    nfilesys="$nfilesys$_nl/programs/$nas_i2"
                fi
                IFS="$_nl"
            done
            IFS="$OIFS"

            current_filesys_data=""
            OIFS="$IFS"; IFS="$_nl"
            for nas_nfi in $nfilesys
            do
                IFS="$OIFS"
                prg=$(echo "$nas_nfi" | sed 's/\/programs\///g')
                filesys1=$(df "$fsm" "$nas_nfi" 2>/dev/null | grep -E -v -i '^$|^auto_|^Filesystem|\/home\/')
                filesys1=$(echo "$filesys1" | sed "s/$prg//g")
                if [ -z "$current_filesys_data" ]; then
                    current_filesys_data="$filesys1/$prg"
                else
                    current_filesys_data="$current_filesys_data$_nl$filesys1/$prg"
                fi
                IFS="$_nl"
            done
            IFS="$OIFS"
            current_filesys_data=$(echo "$current_filesys_data" | grep -E -i 'pbynas|wkmnas' | sed 's/\/programs\/\///g' | sed 's/\/apps\/\///g')
        else
            current_filesys_data=$(echo "$current_filesys_data" | sed 's/\/dev\/mapper\///g')
            current_filesys_data=$(echo $current_filesys_data | sed 's/  */ /g' | sed 's/\/dev/\n\/dev/g')
            current_filesys_data=$(echo "$current_filesys_data" | sed 's/\/unnamed_rmdisk//g' | sed 's/\/unnamed//g')
        fi

        if [ -n "$optns" ]; then
            current_filesys_data=$(echo "$current_filesys_data" | grep -E -i "$optns")
        fi

        filesys=$(echo "$current_filesys_data" | grep -E -v '^$' | sort -uf | sort -k 6,6)
        
        kb="        "
        if [ "$fsm" != "-h" ]; then kb="(KBytes)"; fi

        if [ -n "$filesys" ]; then
            if [ "$fsm" = "-h" ]; then
                printit2
                printf '%s\n' "$gry"
            else
                printit
                printf %s "$gry"
            fi
        fi
    fi
done
printf '\r%s' "$nul"